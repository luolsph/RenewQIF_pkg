// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// increQIF_sub
List increQIF_sub(arma::mat X, arma::vec y, arma::vec nobs, String family, String corstr, arma::vec beta_old, int maxit, double tol);
RcppExport SEXP _RenewQIF_increQIF_sub(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP beta_oldSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< String >::type family(familySEXP);
    Rcpp::traits::input_parameter< String >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(increQIF_sub(X, y, nobs, family, corstr, beta_old, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// increQIF_test
List increQIF_test(arma::mat X, arma::vec y, arma::vec nobs, String family, String corstr, arma::vec beta_old);
RcppExport SEXP _RenewQIF_increQIF_test(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP beta_oldSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< String >::type family(familySEXP);
    Rcpp::traits::input_parameter< String >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_old(beta_oldSEXP);
    rcpp_result_gen = Rcpp::wrap(increQIF_test(X, y, nobs, family, corstr, beta_old));
    return rcpp_result_gen;
END_RCPP
}
// increQIF
List increQIF(arma::mat X, arma::vec y, arma::vec nobs, String family, String corstr, arma::vec beta_old, arma::vec g_accum, arma::mat G_accum, arma::mat C_accum, int maxit, double tol);
RcppExport SEXP _RenewQIF_increQIF(SEXP XSEXP, SEXP ySEXP, SEXP nobsSEXP, SEXP familySEXP, SEXP corstrSEXP, SEXP beta_oldSEXP, SEXP g_accumSEXP, SEXP G_accumSEXP, SEXP C_accumSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nobs(nobsSEXP);
    Rcpp::traits::input_parameter< String >::type family(familySEXP);
    Rcpp::traits::input_parameter< String >::type corstr(corstrSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type beta_old(beta_oldSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type g_accum(g_accumSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type G_accum(G_accumSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type C_accum(C_accumSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(increQIF(X, y, nobs, family, corstr, beta_old, g_accum, G_accum, C_accum, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RenewQIF_increQIF_sub", (DL_FUNC) &_RenewQIF_increQIF_sub, 8},
    {"_RenewQIF_increQIF_test", (DL_FUNC) &_RenewQIF_increQIF_test, 6},
    {"_RenewQIF_increQIF", (DL_FUNC) &_RenewQIF_increQIF, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_RenewQIF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}

